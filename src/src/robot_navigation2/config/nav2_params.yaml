amcl:  # 自适应蒙特卡罗定位（AMCL）配置
  ros__parameters:
    use_sim_time: True  # 使用模拟时间
    alpha1: 0.2  # 运动模型参数
    alpha2: 0.2  # 运动模型参数
    alpha3: 0.2  # 运动模型参数
    alpha4: 0.2  # 运动模型参数
    alpha5: 0.2  # 运动模型参数
    base_frame_id: "base_footprint"  # 机器人底座的坐标框架
    beam_skip_distance: 0.5  # 激光束跳过的距离阈值
    beam_skip_error_threshold: 0.9  # 激光束跳过的错误阈值
    beam_skip_threshold: 0.3  # 激光束跳过的距离阈值
    do_beamskip: false  # 是否启用激光束跳过
    global_frame_id: "map"  # 全局坐标框架
    lambda_short: 0.1  # 短距离的可能性参数
    laser_likelihood_max_dist: 2.0  # 激光概率最大距离
    laser_max_range: 100.0  # 激光最大探测范围
    laser_min_range: -1.0  # 激光最小探测范围
    laser_model_type: "likelihood_field"  # 激光模型类型
    max_beams: 60  # 最大激光束数
    max_particles: 2000  # 最大粒子数
    min_particles: 500  # 最小粒子数
    odom_frame_id: "odom"  # 里程计坐标框架
    pf_err: 0.05  # 粒子滤波器错误阈值
    pf_z: 0.99  # 粒子滤波器的置信度阈值
    recovery_alpha_fast: 0.0  # 快速恢复参数
    recovery_alpha_slow: 0.0  # 慢速恢复参数
    resample_interval: 1  # 重采样间隔
    robot_model_type: "nav2_amcl::DifferentialMotionModel"  # 机器人模型类型
    save_pose_rate: 0.5  # 保存姿态的频率
    sigma_hit: 0.2  # 命中概率标准差
    tf_broadcast: true  # 是否广播 TF
    transform_tolerance: 1.0  # 转换容忍度
    update_min_a: 0.2  # 更新最小角度
    update_min_d: 0.25  # 更新最小距离
    z_hit: 0.5  # 命中概率
    z_max: 0.05  # 最大概率
    z_rand: 0.5  # 随机概率
    z_short: 0.05  # 短距离概率
    scan_topic: scan  # 扫描话题

bt_navigator:  # 行为树导航器配置
  ros__parameters:
    use_sim_time: True  # 使用模拟时间
    global_frame: map  # 全局坐标框架
    robot_base_frame: base_link  # 机器人基座坐标框架
    odom_topic: /odom  # 里程计话题
    bt_loop_duration: 10  # 行为树循环时长
    default_server_timeout: 20  # 默认服务器超时
    wait_for_service_timeout: 1000  # 等待服务超时
    # 'default_nav_through_poses_bt_xml' 和 'default_nav_to_pose_bt_xml' 是默认值:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # 可以在这里设置或通过父启动文件中的 RewrittenYaml 进行重映射到 Nav2。
    plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node  # 计算路径到目标动作节点
      - nav2_compute_path_through_poses_action_bt_node  # 计算通过目标的路径动作节点
      - nav2_smooth_path_action_bt_node  # 平滑路径动作节点
      - nav2_follow_path_action_bt_node  # 跟随路径动作节点
      - nav2_spin_action_bt_node  # 旋转动作节点
      - nav2_wait_action_bt_node  # 等待动作节点
      - nav2_assisted_teleop_action_bt_node  # 辅助遥控动作节点
      - nav2_back_up_action_bt_node  # 后退动作节点
      - nav2_drive_on_heading_bt_node  # 按方向行驶动作节点
      - nav2_clear_costmap_service_bt_node  # 清除代价地图服务节点
      - nav2_is_stuck_condition_bt_node  # 被卡住的条件节点
      - nav2_goal_reached_condition_bt_node  # 到达目标的条件节点
      - nav2_goal_updated_condition_bt_node  # 更新目标的条件节点
      - nav2_globally_updated_goal_condition_bt_node  # 全局更新目标的条件节点
      - nav2_is_path_valid_condition_bt_node  # 路径有效性的条件节点
      - nav2_initial_pose_received_condition_bt_node  # 收到初始姿态的条件节点
      - nav2_reinitialize_global_localization_service_bt_node  # 重新初始化全局定位服务节点
      - nav2_rate_controller_bt_node  # 速率控制节点
      - nav2_distance_controller_bt_node  # 距离控制节点
      - nav2_speed_controller_bt_node  # 速度控制节点
      - nav2_truncate_path_action_bt_node  # 截断路径动作节点
      - nav2_truncate_path_local_action_bt_node  # 本地截断路径动作节点
      - nav2_goal_updater_node_bt_node  # 更新目标节点
      - nav2_recovery_node_bt_node  # 恢复节点
      - nav2_pipeline_sequence_bt_node  # 管道序列节点
      - nav2_round_robin_node_bt_node  # 轮询节点
      - nav2_transform_available_condition_bt_node  # 转换可用条件节点
      - nav2_time_expired_condition_bt_node  # 超时条件节点
      - nav2_path_expiring_timer_condition  # 路径到期定时器条件
      - nav2_distance_traveled_condition_bt_node  # 已行驶距离条件节点
      - nav2_single_trigger_bt_node  # 单次触发节点
      - nav2_goal_updated_controller_bt_node  # 更新目标控制节点
      - nav2_is_battery_low_condition_bt_node  # 电池电量低条件节点
      - nav2_navigate_through_poses_action_bt_node  # 通过姿态导航动作节点
      - nav2_navigate_to_pose_action_bt_node  # 导航到目标动作节点
      - nav2_remove_passed_goals_action_bt_node  # 移除经过目标的动作节点
      - nav2_planner_selector_bt_node  # 规划器选择节点
      - nav2_controller_selector_bt_node  # 控制器选择节点
      - nav2_goal_checker_selector_bt_node  # 目标检查器选择节点
      - nav2_controller_cancel_bt_node  # 控制器取消节点
      - nav2_path_longer_on_approach_bt_node  # 接近时路径更长的节点
      - nav2_wait_cancel_bt_node  # 等待取消节点
      - nav2_spin_cancel_bt_node  # 旋转取消节点
      - nav2_back_up_cancel_bt_node  # 后退取消节点
      - nav2_assisted_teleop_cancel_bt_node  # 辅助遥控取消节点
      - nav2_drive_on_heading_cancel_bt_node  # 按方向行驶取消节点
      - nav2_is_battery_charging_condition_bt_node  # 电池充电条件节点

bt_navigator_navigate_through_poses_rclcpp_node:  # 通过姿态导航的 RCLCPP 节点
  ros__parameters:
    use_sim_time: True  # 使用模拟时间

bt_navigator_navigate_to_pose_rclcpp_node:  # 导航到目标的 RCLCPP 节点
  ros__parameters:
    use_sim_time: True  # 使用模拟时间

controller_server:  # 控制器服务器配置
  ros__parameters:
    use_sim_time: True  # 使用模拟时间
    controller_frequency: 20.0  # 控制器频率
    min_x_velocity_threshold: 0.001  # 最小 x 速度阈值
    min_y_velocity_threshold: 0.5  # 最小 y 速度阈值
    min_theta_velocity_threshold: 0.001  # 最小 theta 速度阈值
    failure_tolerance: 0.3  # 失败容忍度
    progress_checker_plugin: "progress_checker"  # 进度检查器插件

# 进度检查器参数
progress_checker:
  plugin: "nav2_controller::SimpleProgressChecker"  # 使用简单进度检查器插件
  required_movement_radius: 0.5  # 要求的移动半径，机器人至少需要移动此距离才能算作进展
  movement_time_allowance: 10.0  # 允许的移动时间，如果超过此时间则认为机器人被卡住

# 目标检查器参数
general_goal_checker:
  stateful: True  # 是否保持状态信息
  plugin: "nav2_controller::SimpleGoalChecker"  # 使用简单目标检查器插件
  xy_goal_tolerance: 0.15  # 到达目标的xy方向容忍度
  yaw_goal_tolerance: 0.15  # 到达目标时的朝向容忍度

# DWB（动态窗口方法）参数
FollowPath:
  plugin: "dwb_core::DWBLocalPlanner"  # 使用DWB局部规划器插件
  debug_trajectory_details: True  # 是否启用调试轨迹细节
  min_vel_x: 0.0  # 最小x轴速度
  min_vel_y: 0.0  # 最小y轴速度
  max_vel_x: 0.26  # 最大x轴速度
  max_vel_y: 0.0  # 最大y轴速度（设置为0表示不允许y轴移动）
  max_vel_theta: 0.8  # 最大角速度
  min_speed_xy: 0.0  # 最小线速度（x和y）
  max_speed_xy: 0.26  # 最大线速度（x和y）
  min_speed_theta: 0.0  # 最小角速度
  acc_lim_x: 2.5  # x轴加速度限制
  acc_lim_y: 0.0  # y轴加速度限制
  acc_lim_theta: 2.0  # 角加速度限制
  decel_lim_x: -2.5  # x轴减速度限制
  decel_lim_y: 0.0  # y轴减速度限制
  decel_lim_theta: -3.2  # 角减速度限制
  vx_samples: 20  # x轴速度采样数量
  vy_samples: 5  # y轴速度采样数量
  vtheta_samples: 20  # 角速度采样数量
  sim_time: 1.7  # 模拟时间，用于评估轨迹
  linear_granularity: 0.05  # 线性速度粒度
  angular_granularity: 0.025  # 角速度粒度
  transform_tolerance: 0.2  # 坐标转换容忍度
  xy_goal_tolerance: 0.15  # 目标xy方向容忍度
  trans_stopped_velocity: 0.25  # 速度停止阈值
  short_circuit_trajectory_evaluation: True  # 是否启用短路轨迹评估
  stateful: True  # 是否保持状态
  critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]  # 轨迹评估标准
  BaseObstacle.scale: 0.02  # 基础障碍物的权重
  PathAlign.scale: 32.0  # 路径对齐的权重
  PathAlign.forward_point_distance: 0.1  # 路径对齐前向点距离
  GoalAlign.scale: 24.0  # 目标对齐的权重
  GoalAlign.forward_point_distance: 0.1  # 目标对齐前向点距离
  PathDist.scale: 32.0  # 路径距离的权重
  GoalDist.scale: 24.0  # 目标距离的权重
  RotateToGoal.scale: 32.0  # 旋转到目标的权重
  RotateToGoal.slowing_factor: 5.0  # 旋转到目标的减速因子
  RotateToGoal.lookahead_time: -1.0  # 预瞄时间（负值表示不使用）

# 本地成本地图参数
local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0  # 成本地图更新频率
      publish_frequency: 2.0  # 发布频率
      global_frame: odom  # 全局坐标框架
      robot_base_frame: base_link  # 机器人基础坐标框架
      use_sim_time: True  # 是否使用仿真时间
      rolling_window: true  # 是否使用滚动窗口
      width: 3  # 成本地图宽度
      height: 3  # 成本地图高度
      resolution: 0.05  # 成本地图分辨率
      robot_radius: 0.12  # 机器人半径
      plugins: ["voxel_layer", "inflation_layer"]  # 使用的插件
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"  # 通胀层插件
        cost_scaling_factor: 3.0  # 成本缩放因子
        inflation_radius: 0.24  # 通胀半径
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"  # 体素层插件
        enabled: True  # 是否启用体素层
        publish_voxel_map: True  # 是否发布体素地图
        origin_z: 0.0  # Z轴原点
        z_resolution: 0.05  # Z轴分辨率
        z_voxels: 16  # Z轴体素数量
        max_obstacle_height: 2.0  # 最大障碍物高度
        mark_threshold: 0  # 标记阈值
        observation_sources: scan  # 观测源
        scan:
          topic: /scan  # 激光扫描话题
          max_obstacle_height: 2.0  # 最大障碍物高度
          clearing: True  # 是否启用清除
          marking: True  # 是否启用标记
          data_type: "LaserScan"  # 数据类型
          raytrace_max_range: 3.0  # 光线追踪最大范围
          raytrace_min_range: 0.0  # 光线追踪最小范围
          obstacle_max_range: 2.5  # 障碍物最大范围
          obstacle_min_range: 0.0  # 障碍物最小范围
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"  # 静态层插件
        map_subscribe_transient_local: True  # 订阅本地临时静态地图
      always_send_full_costmap: True  # 是否始终发送完整的成本地图

# 全局成本地图配置
global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0  # 成本地图更新频率 (Hz)
      publish_frequency: 1.0  # 成本地图发布频率 (Hz)
      global_frame: map  # 全局坐标框架
      robot_base_frame: base_link  # 机器人基础坐标框架
      use_sim_time: True  # 是否使用仿真时间
      robot_radius: 0.12  # 机器人半径 (米)
      resolution: 0.05  # 成本地图分辨率 (米)
      track_unknown_space: true  # 是否跟踪未知空间
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]  # 使用的插件列表

      # 障碍物层配置
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"  # 使用的插件
        enabled: True  # 是否启用障碍物层
        observation_sources: scan  # 观测源
        scan:
          topic: /scan  # 激光扫描话题
          max_obstacle_height: 2.0  # 最大障碍物高度 (米)
          clearing: True  # 是否启用清除
          marking: True  # 是否启用标记
          data_type: "LaserScan"  # 数据类型
          raytrace_max_range: 3.0  # 光线追踪最大范围 (米)
          raytrace_min_range: 0.0  # 光线追踪最小范围 (米)
          obstacle_max_range: 2.5  # 障碍物最大范围 (米)
          obstacle_min_range: 0.0  # 障碍物最小范围 (米)

      # 静态层配置
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"  # 使用的静态层插件
        map_subscribe_transient_local: True  # 是否订阅本地临时静态地图

      # 通胀层配置
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"  # 使用的通胀层插件
        cost_scaling_factor: 3.0  # 成本缩放因子
        inflation_radius: 0.24  # 通胀半径 (米)

      always_send_full_costmap: True  # 是否始终发送完整的成本地图

# 地图服务器配置
map_server:
  ros__parameters:
    use_sim_time: True  # 是否使用仿真时间
    yaml_filename: ""  # 地图文件路径，启动时会被覆盖

# 地图保存器配置
map_saver:
  ros__parameters:
    use_sim_time: True  # 是否使用仿真时间
    save_map_timeout: 5.0  # 保存地图的超时时间 (秒)
    free_thresh_default: 0.25  # 默认空闲阈值
    occupied_thresh_default: 0.65  # 默认占用阈值
    map_subscribe_transient_local: True  # 是否订阅本地临时地图

# 规划器服务器配置
planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0  # 预计规划频率 (Hz)
    use_sim_time: True  # 是否使用仿真时间
    planner_plugins: ["GridBased"]  # 使用的规划器插件列表
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"  # 使用的网格基础规划器
      tolerance: 0.5  # 容忍度 (米)
      use_astar: false  # 是否使用A*算法
      allow_unknown: true  # 是否允许未知空间

# 平滑器服务器配置
smoother_server:
  ros__parameters:
    use_sim_time: True  # 是否使用仿真时间
    smoother_plugins: ["simple_smoother"]  # 使用的平滑器插件列表
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"  # 使用的简单平滑器插件
      tolerance: 1.0e-10  # 容忍度
      max_its: 1000  # 最大迭代次数
      do_refinement: True  # 是否进行细化

# 行为服务器配置
behavior_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw  # 成本地图话题
    footprint_topic: local_costmap/published_footprint  # 足迹话题
    cycle_frequency: 10.0  # 行为循环频率 (Hz)
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]  # 使用的行为插件列表

    # 各种行为的插件配置
    spin:
      plugin: "nav2_behaviors/Spin"  # 旋转行为插件
    backup:
      plugin: "nav2_behaviors/BackUp"  # 后退行为插件
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"  # 朝向行驶行为插件
    wait:
      plugin: "nav2_behaviors/Wait"  # 等待行为插件
    assisted_teleop:
      plugin: "nav2_behaviors/AssistedTeleop"  # 辅助遥控行为插件

    global_frame: odom  # 全局坐标框架
    robot_base_frame: base_link  # 机器人基础坐标框架
    transform_tolerance: 0.1  # 坐标转换容忍度
    use_sim_time: true  # 是否使用仿真时间
    simulate_ahead_time: 2.0  # 预测的前瞻时间 (秒)
    max_rotational_vel: 1.0  # 最大旋转速度 (弧度/秒)
    min_rotational_vel: 0.4  # 最小旋转速度 (弧度/秒)
    rotational_acc_lim: 3.2  # 旋转加速度限制

# 机器人状态发布器配置
robot_state_publisher:
  ros__parameters:
    use_sim_time: True  # 是否使用仿真时间

# 路径点跟随器配置
waypoint_follower:
  ros__parameters:
    use_sim_time: True  # 是否使用仿真时间
    loop_rate: 20  # 循环频率 (Hz)
    stop_on_failure: false  # 失败时是否停止
    waypoint_task_executor_plugin: "wait_at_waypoint"  # 路径点任务执行插件
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"  # 等待在路径点的插件
      enabled: True  # 是否启用
      waypoint_pause_duration: 200  # 在路径点暂停的持续时间 (秒)

# 速度平滑器配置
velocity_smoother:
  ros__parameters:
    use_sim_time: True  # 是否使用仿真时间
    smoothing_frequency: 20.0  # 平滑频率 (Hz)
    scale_velocities: False  # 是否缩放速度
    feedback: "OPEN_LOOP"  # 反馈类型
    max_velocity: [0.26, 0.0, 1.0]  # 最大速度 (x, y, θ)
    min_velocity: [-0.26, 0.0, -1.0]  # 最小速度 (x, y, θ)
    max_accel: [2.5, 0.0, 3.2]  # 最大加速度 (x, y, θ)
    max_decel: [-2.5, 0.0, -3.2]  # 最大减速度 (x, y, θ)
    odom_topic: "odom"  # 里程计话题
    odom_duration: 0.1  # 里程计时间持续 (秒)
    deadband_velocity: [0.0, 0.0, 0.0]  # 死区速度 (x, y, θ)
    velocity_timeout: 1.0  # 速度超时时间 (秒)
